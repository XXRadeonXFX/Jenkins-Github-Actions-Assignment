name: Flask CI/CD with Container Registry

on:
  push:
    branches: [main, staging]
  pull_request:
    branches: [main, staging]
  release:
    types: [created]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-test:
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: üì¶ Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: üì¶ Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: üß™ Run tests with cloud MongoDB
        run: |
          echo "Running tests with MongoDB cloud configuration..."
          python -m pytest test_app.py -v --tb=short --maxfail=5
        env:
          MONGO_URI: ${{ secrets.MONGO_URI }}

      - name: üîë Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üèóÔ∏è Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: üöÄ Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  code-quality:
    runs-on: ubuntu-latest
    needs: build-test

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: üì¶ Install code quality tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort

      - name: üßπ Check code formatting with Black
        run: black --check --diff . || echo "Code formatting check completed"

      - name: üìè Check import sorting with isort
        run: isort --check-only --diff . || echo "Import sorting check completed"

      - name: üîç Lint with flake8
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || echo "Linting completed"

  security-scan:
    runs-on: ubuntu-latest
    needs: build-test

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: üîí Install security scanner
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit

      - name: üîç Check for security vulnerabilities
        run: |
          safety check || echo "Security check completed"
          bandit -r . -f json || echo "Bandit security scan completed"

  deploy-staging:
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [build-test, code-quality, security-scan]
    environment: staging

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Setup SSH key file
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.STAGING_SSH_KEY }}" > ~/.ssh/staging_key
          chmod 600 ~/.ssh/staging_key

      - name: üîë Configure SSH
        run: |
          # Add host to known_hosts
          ssh-keyscan -H ${{ secrets.STAGING_HOST }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
          
          # Create SSH config
          cat > ~/.ssh/config << 'SSH_CONFIG'
          Host staging
            HostName ${{ secrets.STAGING_HOST }}
            User ${{ secrets.STAGING_USER }}
            IdentityFile ~/.ssh/staging_key
            StrictHostKeyChecking no
            ConnectTimeout 30
          SSH_CONFIG
          chmod 600 ~/.ssh/config

      - name: üß™ Test SSH Connection
        run: |
          echo "Testing SSH connection..."
          ssh staging "echo 'SSH connection successful'; whoami; uptime"

      - name: üê≥ Setup Docker and Registry on staging
        timeout-minutes: 3
        run: |
          echo "Setting up Docker and container registry access..."
          
          ssh staging << 'EOF'
            set -e
            
            # Install Docker if not present
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
              echo "Docker installed successfully"
            else
              echo "Docker already installed: $(docker --version)"
            fi
            
            # Ensure Docker service is running
            sudo systemctl start docker
            sudo systemctl enable docker
            
            # Add user to docker group
            sudo usermod -aG docker $USER
            
            echo "Docker setup completed."
          EOF

      - name: üöÄ Deploy to Staging via Container Registry
        timeout-minutes: 5
        run: |
          echo "Deploying to staging using container registry..."
          
          # Get the image tag for this branch
          IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-${{ github.sha }}"
          echo "Deploying image: $IMAGE_TAG"
          
          ssh staging << EOF
            set -e
            
            echo "=== Starting staging deployment ==="
            
            # Login to GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | sudo docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
            
            # Stop existing application
            echo "Stopping existing containers..."
            sudo docker stop student-app-staging 2>/dev/null || true
            sudo docker rm student-app-staging 2>/dev/null || true
            
            # Pull the new image (much faster than file transfer!)
            echo "Pulling Docker image from registry..."
            sudo docker pull $IMAGE_TAG
            
            # Run new container
            echo "Starting new container..."
            sudo docker run -d \
              --name student-app-staging \
              --restart unless-stopped \
              -p 5000:5000 \
              -e MONGO_URI='${{ secrets.MONGO_URI }}' \
              $IMAGE_TAG
            
            # Wait for application to start
            echo "Waiting for application to start..."
            sleep 15
            
            # Check if container is running
            if sudo docker ps | grep student-app-staging; then
              echo "‚úÖ Container is running successfully"
              sudo docker logs student-app-staging --tail 10
            else
              echo "‚ùå Container failed to start"
              echo "Container logs:"
              sudo docker logs student-app-staging || true
              exit 1
            fi
            
            # Cleanup old images (keep last 3)
            echo "Cleaning up old images..."
            sudo docker images ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} --format "table {{.Tag}}\t{{.ID}}" | grep staging | tail -n +4 | awk '{print \$2}' | xargs -r sudo docker rmi || true
            
            echo "‚úÖ Staging deployment completed!"
          EOF

      - name: üß™ Run staging health check
        timeout-minutes: 2
        run: |
          echo "Running health check on staging..."
          max_attempts=8
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Health check attempt $attempt/$max_attempts"
            
            if curl -f --connect-timeout 5 --max-time 15 http://${{ secrets.STAGING_HOST }}:5000/health; then
              echo "‚úÖ Staging health check passed!"
              break
            else
              echo "‚ùå Health check failed, retrying in 10 seconds..."
              sleep 10
              attempt=$((attempt + 1))
            fi
          done
          
          if [ $attempt -gt $max_attempts ]; then
            echo "‚ùå Staging health check failed after $max_attempts attempts"
            ssh staging "sudo docker logs student-app-staging --tail 20" || true
            exit 1
          fi

      - name: üß™ Run staging smoke tests
        timeout-minutes: 2
        run: |
          echo "Running smoke tests on staging..."
          
          # Test API endpoints
          echo "Testing /students endpoint..."
          if curl -f --connect-timeout 5 --max-time 15 http://${{ secrets.STAGING_HOST }}:5000/students; then
            echo "‚úÖ /students endpoint working"
          else
            echo "‚ùå /students endpoint failed"
            exit 1
          fi
          
          echo "Testing POST /students endpoint..."
          response=$(curl -f --connect-timeout 5 --max-time 15 -X POST http://${{ secrets.STAGING_HOST }}:5000/students \
            -H "Content-Type: application/json" \
            -d '{"name": "Test User", "age": 25}')
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ POST /students endpoint working"
            echo "Response: $response"
          else
            echo "‚ùå POST /students endpoint failed"
            exit 1
          fi
          
          echo "‚úÖ All smoke tests passed!"

      - name: üì¢ Staging deployment notification
        run: |
          echo "‚úÖ Staging deployment completed successfully!"
          echo "üåê Staging URL: http://${{ secrets.STAGING_HOST }}:5000"
          echo "üè• Health URL: http://${{ secrets.STAGING_HOST }}:5000/health"
          echo "üì¶ Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:staging-${{ github.sha }}"
          echo "üß™ Staging environment is ready for testing"

  deploy-production:
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    needs: [build-test, code-quality, security-scan]
    environment: production

    steps:
      - name: üì• Checkout code
        uses: actions/checkout@v4

      - name: üîß Setup SSH key file
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.PRODUCTION_SSH_KEY }}" > ~/.ssh/production_key
          chmod 600 ~/.ssh/production_key

      - name: üîë Configure SSH for production
        run: |
          # Add host to known_hosts
          ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
          
          # Create SSH config
          cat > ~/.ssh/config << 'SSH_CONFIG'
          Host production
            HostName ${{ secrets.PRODUCTION_HOST }}
            User ${{ secrets.PRODUCTION_USER }}
            IdentityFile ~/.ssh/production_key
            StrictHostKeyChecking no
            ConnectTimeout 30
          SSH_CONFIG
          chmod 600 ~/.ssh/config

      - name: üß™ Test SSH Connection
        run: |
          echo "Testing SSH connection to production..."
          ssh production "echo 'SSH connection successful'; whoami; uptime"

      - name: üê≥ Setup Docker on production
        timeout-minutes: 3
        run: |
          echo "Setting up Docker on production..."
          
          ssh production << 'EOF'
            set -e
            
            # Install Docker if not present
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
              echo "Docker installed successfully"
            else
              echo "Docker already installed"
            fi
            
            # Ensure Docker service is running
            sudo systemctl start docker
            sudo systemctl enable docker
            
            # Add user to docker group
            sudo usermod -aG docker $USER
            
            echo "Docker setup completed for production."
          EOF

      - name: üöÄ Deploy to Production via Container Registry
        timeout-minutes: 7
        run: |
          echo "Deploying to production using container registry..."
          
          # Get the image tag for this release
          IMAGE_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }}"
          echo "Deploying image: $IMAGE_TAG"
          
          ssh production << EOF
            set -e
            
            echo "=== Starting production deployment ==="
            
            # Login to GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | sudo docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
            
            # Create backup of current deployment
            if sudo docker ps | grep student-app-production; then
              echo "Creating backup of current deployment..."
              CURRENT_IMAGE=\$(sudo docker inspect student-app-production --format='{{.Config.Image}}')
              sudo docker tag \$CURRENT_IMAGE ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:backup-\$(date +%Y%m%d-%H%M%S) 2>/dev/null || true
            fi
            
            # Stop existing application gracefully
            echo "Stopping existing containers..."
            sudo docker stop student-app-production 2>/dev/null || true
            sudo docker rm student-app-production 2>/dev/null || true
            
            # Pull the new image
            echo "Pulling Docker image from registry..."
            sudo docker pull $IMAGE_TAG
            
            # Tag as current version
            sudo docker tag $IMAGE_TAG ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:current
            
            # Run new container
            echo "Starting new container..."
            sudo docker run -d \
              --name student-app-production \
              --restart unless-stopped \
              -p 80:5000 \
              -e MONGO_URI='${{ secrets.MONGO_URI }}' \
              $IMAGE_TAG
            
            # Wait for application to start
            echo "Waiting for application to start..."
            sleep 20
            
            # Check if container is running
            if sudo docker ps | grep student-app-production; then
              echo "‚úÖ Container is running successfully"
              sudo docker logs student-app-production --tail 10
            else
              echo "‚ùå Container failed to start"
              echo "Container logs:"
              sudo docker logs student-app-production || true
              exit 1
            fi
            
            # Cleanup old images (keep last 5)
            echo "Cleaning up old images..."
            sudo docker images ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} --format "table {{.Tag}}\t{{.ID}}" | grep -E "(main|backup)" | tail -n +6 | awk '{print \$2}' | xargs -r sudo docker rmi || true
            
            echo "‚úÖ Production deployment completed!"
          EOF

      - name: üß™ Run production health check
        timeout-minutes: 5
        run: |
          echo "Running health check on production..."
          max_attempts=15
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Health check attempt $attempt/$max_attempts"
            
            if curl -f --connect-timeout 5 --max-time 15 http://${{ secrets.PRODUCTION_HOST }}/health; then
              echo "‚úÖ Production health check passed!"
              break
            else
              echo "‚ùå Health check failed, retrying in 15 seconds..."
              
              # Show container status on failure
              if [ $attempt -eq 5 ] || [ $attempt -eq 10 ]; then
                echo "Checking container status..."
                ssh production "sudo docker ps -a | grep student-app || true; sudo docker logs student-app-production --tail 5 || true"
              fi
              
              sleep 15
              attempt=$((attempt + 1))
            fi
          done
          
          if [ $attempt -gt $max_attempts ]; then
            echo "‚ùå Production health check failed after $max_attempts attempts"
            echo "Rolling back deployment..."
            
            ssh production << 'EOF'
              echo "Rolling back to previous version..."
              sudo docker stop student-app-production || true
              sudo docker rm student-app-production || true
              
              # Find latest backup
              BACKUP_IMAGE=$(sudo docker images --format 'table {{.Repository}}:{{.Tag}}' | grep backup- | head -n 1 | tr -s ' ' | cut -d' ' -f1)
              
              if [ ! -z "$BACKUP_IMAGE" ]; then
                echo "Restoring backup: $BACKUP_IMAGE"
                sudo docker run -d \
                  --name student-app-production \
                  --restart unless-stopped \
                  -p 80:5000 \
                  -e MONGO_URI='${{ secrets.MONGO_URI }}' \
                  $BACKUP_IMAGE
              else
                echo "No backup found, manual intervention required"
              fi
            EOF
            
            exit 1
          fi

      - name: üß™ Run production smoke tests
        timeout-minutes: 3
        run: |
          echo "Running comprehensive smoke tests on production..."
          
          # Test core API endpoints
          echo "Testing /health endpoint..."
          if curl -f --connect-timeout 5 --max-time 15 http://${{ secrets.PRODUCTION_HOST }}/health; then
            echo "‚úÖ Health endpoint working"
          else
            echo "‚ùå Health endpoint failed"
            exit 1
          fi
          
          echo "Testing /students endpoint..."
          if curl -f --connect-timeout 5 --max-time 15 http://${{ secrets.PRODUCTION_HOST }}/students; then
            echo "‚úÖ Students endpoint working"
          else
            echo "‚ùå Students endpoint failed"
            exit 1
          fi
          
          echo "Testing POST /students endpoint..."
          response=$(curl -f --connect-timeout 5 --max-time 15 -X POST http://${{ secrets.PRODUCTION_HOST }}/students \
            -H "Content-Type: application/json" \
            -d '{"name": "Production Test User", "age": 25}')
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ POST /students endpoint working"
            echo "Response: $response"
            
            # Extract student ID and test GET by ID
            student_id=$(echo "$response" | grep -o '"_id":"[^"]*"' | cut -d'"' -f4)
            if [ ! -z "$student_id" ]; then
              echo "Testing GET /students/$student_id endpoint..."
              if curl -f --connect-timeout 5 --max-time 15 http://${{ secrets.PRODUCTION_HOST }}/students/$student_id; then
                echo "‚úÖ GET by ID working"
              else
                echo "‚ùå GET by ID failed"
              fi
              
              echo "Testing DELETE /students/$student_id endpoint..."
              if curl -f --connect-timeout 5 --max-time 15 -X DELETE http://${{ secrets.PRODUCTION_HOST }}/students/$student_id; then
                echo "‚úÖ DELETE endpoint working"
              else
                echo "‚ùå DELETE endpoint failed"
              fi
            fi
          else
            echo "‚ùå POST /students endpoint failed"
            exit 1
          fi
          
          echo "‚úÖ All production smoke tests passed!"

      - name: üìä Production deployment notification
        run: |
          echo "üéâ Production deployment completed successfully!"
          echo "üì¶ Version: ${{ github.event.release.tag_name }}"
          echo "üåê Production URL: http://${{ secrets.PRODUCTION_HOST }}"
          echo "üè• Health URL: http://${{ secrets.PRODUCTION_HOST }}/health"
          echo "üì¶ Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }}"
          echo "üöÄ Production environment is live and healthy"

  cleanup:
    if: always()
    runs-on: ubuntu-latest
    needs: [build-test, code-quality, security-scan]

    steps:
      - name: üßπ Cleanup test data
        run: |
          echo "Cleaning up any test data from cloud MongoDB..."
          # Add cleanup script if needed
          echo "Test cleanup completed"
        env:
          MONGO_URI: ${{ secrets.MONGO_URI }}
