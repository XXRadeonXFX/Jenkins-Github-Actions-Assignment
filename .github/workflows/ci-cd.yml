name: Flask CI/CD Simple Registry

on:
  push:
    branches: [main, staging]
  pull_request:
    branches: [main, staging]
  release:
    types: [created]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-test:
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 📦 Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🧪 Run tests with cloud MongoDB
        run: |
          echo "Running tests with MongoDB cloud configuration..."
          python -m pytest test_app.py -v --tb=short --maxfail=5
        env:
          MONGO_URI: ${{ secrets.MONGO_URI }}

      - name: 🔑 Log in to Container Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: 🏗️ Build Docker image
        run: |
          # Convert repository name to lowercase
          REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          
          # Build image with simple tags
          docker build -t ghcr.io/${REPO_LOWER}:${{ github.sha }} .
          docker build -t ghcr.io/${REPO_LOWER}:latest .
          
          # Tag for branch-specific deployment
          if [ "${{ github.ref_name }}" = "staging" ]; then
            docker tag ghcr.io/${REPO_LOWER}:${{ github.sha }} ghcr.io/${REPO_LOWER}:staging
          elif [ "${{ github.ref_name }}" = "main" ]; then
            docker tag ghcr.io/${REPO_LOWER}:${{ github.sha }} ghcr.io/${REPO_LOWER}:production
          fi

      - name: 🚀 Push Docker image
        run: |
          # Convert repository name to lowercase
          REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          
          # Push all tags
          docker push ghcr.io/${REPO_LOWER}:${{ github.sha }}
          docker push ghcr.io/${REPO_LOWER}:latest
          
          # Push branch-specific tags
          if [ "${{ github.ref_name }}" = "staging" ]; then
            docker push ghcr.io/${REPO_LOWER}:staging
          elif [ "${{ github.ref_name }}" = "main" ]; then
            docker push ghcr.io/${REPO_LOWER}:production
          fi

  code-quality:
    runs-on: ubuntu-latest
    needs: build-test

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 📦 Install code quality tools
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort

      - name: 🧹 Check code formatting with Black
        run: black --check --diff . || echo "Code formatting check completed"

      - name: 📏 Check import sorting with isort
        run: isort --check-only --diff . || echo "Import sorting check completed"

      - name: 🔍 Lint with flake8
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics || echo "Linting completed"

  security-scan:
    runs-on: ubuntu-latest
    needs: build-test

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 🔒 Install security scanner
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit

      - name: 🔍 Check for security vulnerabilities
        run: |
          safety check || echo "Security check completed"
          bandit -r . -f json || echo "Bandit security scan completed"

  deploy-staging:
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [build-test, code-quality, security-scan]
    environment: staging

    steps:
      - name: 🔧 Setup SSH key file
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.STAGING_SSH_KEY }}" > ~/.ssh/staging_key
          chmod 600 ~/.ssh/staging_key

      - name: 🔑 Configure SSH
        run: |
          ssh-keyscan -H ${{ secrets.STAGING_HOST }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
          
          cat > ~/.ssh/config << 'SSH_CONFIG'
          Host staging
            HostName ${{ secrets.STAGING_HOST }}
            User ${{ secrets.STAGING_USER }}
            IdentityFile ~/.ssh/staging_key
            StrictHostKeyChecking no
            ConnectTimeout 30
          SSH_CONFIG
          chmod 600 ~/.ssh/config

      - name: 🧪 Test SSH Connection
        run: |
          echo "Testing SSH connection..."
          ssh staging "echo 'SSH connection successful'; whoami; uptime"

      - name: 🐳 Setup Docker on staging
        timeout-minutes: 3
        run: |
          echo "Setting up Docker..."
          
          ssh staging << 'EOF'
            set -e
            
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
            else
              echo "Docker already installed: $(docker --version)"
            fi
            
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker $USER
            
            echo "Docker setup completed."
          EOF

      - name: 🚀 Deploy to Staging
        timeout-minutes: 5
        run: |
          echo "Deploying to staging..."
          
          # Convert repository name to lowercase
          REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          IMAGE_TAG="ghcr.io/${REPO_LOWER}:staging"
          
          echo "Deploying image: $IMAGE_TAG"
          
          ssh staging << EOF
            set -e
            
            echo "=== Starting staging deployment ==="
            
            # Login to registry
            echo "${{ secrets.GITHUB_TOKEN }}" | sudo docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Stop existing application
            echo "Stopping existing containers..."
            sudo docker stop student-app-staging 2>/dev/null || true
            sudo docker rm student-app-staging 2>/dev/null || true
            
            # Pull the new image
            echo "Pulling Docker image from registry..."
            sudo docker pull $IMAGE_TAG
            
            # Run new container
            echo "Starting new container..."
            sudo docker run -d \
              --name student-app-staging \
              --restart unless-stopped \
              -p 5000:5000 \
              -e MONGO_URI='${{ secrets.MONGO_URI }}' \
              $IMAGE_TAG
            
            # Wait for application to start
            echo "Waiting for application to start..."
            sleep 15
            
            # Check if container is running
            if sudo docker ps | grep student-app-staging; then
              echo "✅ Container is running successfully"
              sudo docker logs student-app-staging --tail 10
            else
              echo "❌ Container failed to start"
              sudo docker logs student-app-staging || true
              exit 1
            fi
            
            echo "✅ Staging deployment completed!"
          EOF

      - name: 🧪 Run staging health check
        timeout-minutes: 2
        run: |
          echo "Running health check on staging..."
          max_attempts=8
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Health check attempt $attempt/$max_attempts"
            
            if curl -f --connect-timeout 5 --max-time 15 http://${{ secrets.STAGING_HOST }}:5000/health; then
              echo "✅ Staging health check passed!"
              break
            else
              echo "❌ Health check failed, retrying in 10 seconds..."
              sleep 10
              attempt=$((attempt + 1))
            fi
          done
          
          if [ $attempt -gt $max_attempts ]; then
            echo "❌ Staging health check failed"
            exit 1
          fi

      - name: 📢 Staging deployment notification
        run: |
          echo "✅ Staging deployment completed successfully!"
          echo "🌐 Staging URL: http://${{ secrets.STAGING_HOST }}:5000"
          echo "📦 Image: ghcr.io/$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]'):staging"

  deploy-production:
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    needs: [build-test, code-quality, security-scan]
    environment: production

    steps:
      - name: 🔧 Setup SSH key file
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "${{ secrets.PRODUCTION_SSH_KEY }}" > ~/.ssh/production_key
          chmod 600 ~/.ssh/production_key

      - name: 🔑 Configure SSH for production
        run: |
          ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
          
          cat > ~/.ssh/config << 'SSH_CONFIG'
          Host production
            HostName ${{ secrets.PRODUCTION_HOST }}
            User ${{ secrets.PRODUCTION_USER }}
            IdentityFile ~/.ssh/production_key
            StrictHostKeyChecking no
            ConnectTimeout 30
          SSH_CONFIG
          chmod 600 ~/.ssh/config

      - name: 🧪 Test SSH Connection
        run: |
          echo "Testing SSH connection to production..."
          ssh production "echo 'SSH connection successful'; whoami; uptime"

      - name: 🐳 Setup Docker on production
        timeout-minutes: 3
        run: |
          echo "Setting up Docker on production..."
          
          ssh production << 'EOF'
            set -e
            
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
            else
              echo "Docker already installed"
            fi
            
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker $USER
            
            echo "Docker setup completed for production."
          EOF

      - name: 🚀 Deploy to Production
        timeout-minutes: 7
        run: |
          echo "Deploying to production..."
          
          # Convert repository name to lowercase
          REPO_LOWER=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          IMAGE_TAG="ghcr.io/${REPO_LOWER}:production"
          
          echo "Deploying image: $IMAGE_TAG"
          
          ssh production << EOF
            set -e
            
            echo "=== Starting production deployment ==="
            
            # Login to registry
            echo "${{ secrets.GITHUB_TOKEN }}" | sudo docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Create backup of current deployment
            if sudo docker ps | grep student-app-production; then
              echo "Creating backup of current deployment..."
              CURRENT_IMAGE=\$(sudo docker inspect student-app-production --format='{{.Config.Image}}')
              sudo docker tag \$CURRENT_IMAGE ${REPO_LOWER}:backup-\$(date +%Y%m%d-%H%M%S) 2>/dev/null || true
            fi
            
            # Stop existing application gracefully
            echo "Stopping existing containers..."
            sudo docker stop student-app-production 2>/dev/null || true
            sudo docker rm student-app-production 2>/dev/null || true
            
            # Pull the new image
            echo "Pulling Docker image from registry..."
            sudo docker pull $IMAGE_TAG
            
            # Run new container
            echo "Starting new container..."
            sudo docker run -d \
              --name student-app-production \
              --restart unless-stopped \
              -p 80:5000 \
              -e MONGO_URI='${{ secrets.MONGO_URI }}' \
              $IMAGE_TAG
            
            # Wait for application to start
            echo "Waiting for application to start..."
            sleep 20
            
            # Check if container is running
            if sudo docker ps | grep student-app-production; then
              echo "✅ Container is running successfully"
              sudo docker logs student-app-production --tail 10
            else
              echo "❌ Container failed to start"
              sudo docker logs student-app-production || true
              exit 1
            fi
            
            echo "✅ Production deployment completed!"
          EOF

      - name: 🧪 Run production health check
        timeout-minutes: 3
        run: |
          echo "Running health check on production..."
          max_attempts=10
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Health check attempt $attempt/$max_attempts"
            
            if curl -f --connect-timeout 5 --max-time 15 http://${{ secrets.PRODUCTION_HOST }}/health; then
              echo "✅ Production health check passed!"
              break
            else
              echo "❌ Health check failed, retrying in 15 seconds..."
              sleep 15
              attempt=$((attempt + 1))
            fi
          done
          
          if [ $attempt -gt $max_attempts ]; then
            echo "❌ Production health check failed"
            exit 1
          fi

      - name: 📊 Production deployment notification
        run: |
          echo "🎉 Production deployment completed successfully!"
          echo "📦 Version: ${{ github.event.release.tag_name }}"
          echo "🌐 Production URL: http://${{ secrets.PRODUCTION_HOST }}"
          echo "📦 Image: ghcr.io/$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]'):production"

  cleanup:
    if: always()
    runs-on: ubuntu-latest
    needs: [build-test, code-quality, security-scan]

    steps:
      - name: 🧹 Cleanup test data
        run: |
          echo "Cleaning up any test data from cloud MongoDB..."
          echo "Test cleanup completed"
        env:
          MONGO_URI: ${{ secrets.MONGO_URI }}
