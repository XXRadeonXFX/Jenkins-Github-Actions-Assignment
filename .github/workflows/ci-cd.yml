name: Student Management CI/CD

on:
  push:
    branches: [main, staging]
  pull_request:
    branches: [main]
  release:
    types: [published]

jobs:
  # 🧪 Build and Test
  build-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 📦 Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: 📦 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: 🧪 Run tests with MongoDB secret
        env:
          MONGO_URI: ${{ secrets.MONGO_URI }}
        run: |
          echo "Running tests with MongoDB secret configuration..."
          pytest test_app.py --maxfail=1 --disable-warnings -v

      - name: 🏥 Basic health check
        env:
          MONGO_URI: ${{ secrets.MONGO_URI }}
        run: |
          echo "Starting application for health check..."
          timeout 30s python app.py &
          sleep 5
          
          # Test if app is responding
          python -c "
          import requests
          import time
          
          try:
              time.sleep(2)
              response = requests.get('http://localhost:5000/health', timeout=5)
              print(f'Health check status: {response.status_code}')
              if response.status_code == 200:
                  print('✅ Health check passed!')
              else:
                  print('⚠️ Health check returned non-200 status')
          except Exception as e:
              print(f'⚠️ Health check failed: {e}')
              print('Application may not be fully ready yet')
          "

  # 🔒 Security scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-test
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 🔒 Install security tools
        run: |
          pip install bandit safety

      - name: 🔒 Run security scan
        run: |
          echo "Running Bandit security scan..."
          bandit -r . -ll || echo "Security scan completed with warnings"
          
          echo "Checking for vulnerabilities..."
          safety check || echo "Vulnerability check completed"

  # 🚀 Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-test, security]
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🚀 Deploy to staging
        env:
          MONGO_URI: ${{ secrets.MONGO_URI }}
          STAGING_HOST: ${{ secrets.STAGING_HOST }}
          STAGING_USER: ${{ secrets.STAGING_USER }}
        run: |
          echo "🚀 Deploying to staging environment..."
          echo "MongoDB URI configured: ${{ secrets.MONGO_URI != '' }}"
          echo "Staging host configured: ${{ secrets.STAGING_HOST != '' }}"
          
          # Here you would typically:
          # 1. Build Docker image
          # 2. Push to registry  
          # 3. Deploy to staging server
          # 4. Run health checks
          
          echo "✅ Staging deployment simulation completed"

      - name: 🏥 Staging health check
        run: |
          echo "🏥 Running staging health checks..."
          echo "✅ Staging health check simulation completed"

  # 🌟 Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-test, security]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: production
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🌟 Deploy to production
        env:
          MONGO_URI: ${{ secrets.MONGO_URI }}
          PRODUCTION_HOST: ${{ secrets.PRODUCTION_HOST }}
          PRODUCTION_USER: ${{ secrets.PRODUCTION_USER }}
        run: |
          echo "🌟 Deploying to production environment..."
          echo "MongoDB URI configured: ${{ secrets.MONGO_URI != '' }}"
          echo "Production host configured: ${{ secrets.PRODUCTION_HOST != '' }}"
          echo "Release tag: ${{ github.event.release.tag_name }}"
          
          # Here you would typically:
          # 1. Create backup
          # 2. Build production Docker image
          # 3. Deploy with zero downtime
          # 4. Run comprehensive health checks
          # 5. Send notifications
          
          echo "✅ Production deployment simulation completed"

      - name: 🏥 Production health check
        run: |
          echo "🏥 Running production health checks..."
          echo "✅ Production health check simulation completed"

      - name: 🎉 Deployment success
        run: |
          echo "🎉 Production deployment successful!"
          echo "📊 Release: ${{ github.event.release.tag_name }}"
          echo "👤 Deployed by: ${{ github.actor }}"
